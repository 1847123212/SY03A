<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\di05a.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\di05a.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Feb 26 14:16:41 2019
<BR><P>
<H3>Maximum Stack Usage =       1080 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Comm_Event_Proc &rArr; Uart_Proc &rArr; Yc_Money_In &rArr; OpenAddMoney &rArr; UpdataRefer_ToEe_WithMac &rArr; Price_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ANA_IRQHandler</a> from v85xx_isr.o(i.ANA_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[1c]">DMA_IRQHandler</a> from v85xx_isr.o(i.DMA_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[1d]">FLASH_IRQHandler</a> from v85xx_isr.o(i.FLASH_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from v85xx_isr.o(i.HardFault_Handler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[a]">I2C_IRQHandler</a> from v85xx_isr.o(i.I2C_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[12]">ISO78160_IRQHandler</a> from v85xx_isr.o(i.ISO78160_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[13]">ISO78161_IRQHandler</a> from v85xx_isr.o(i.ISO78161_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from v85xx_isr.o(i.NMI_Handler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[6]">PMU_IRQHandler</a> from v85xx_isr.o(i.PMU_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[18]">PWM0_IRQHandler</a> from v85xx_isr.o(i.PWM0_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[19]">PWM1_IRQHandler</a> from v85xx_isr.o(i.PWM1_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[1a]">PWM2_IRQHandler</a> from v85xx_isr.o(i.PWM2_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[1b]">PWM3_IRQHandler</a> from v85xx_isr.o(i.PWM3_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from v85xx_isr.o(i.PendSV_Handler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from v85xx_isr.o(i.RTC_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_v85xx.o(.ARM.__AT_0xC0) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[b]">SPI1_IRQHandler</a> from v85xx_isr.o(i.SPI1_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[1f]">SPI2_IRQHandler</a> from v85xx_isr.o(i.SPI2_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from v85xx_isr.o(i.SVC_Handler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from v85xx_isr.o(i.SysTick_Handler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[14]">TMR0_IRQHandler</a> from v85xx_isr.o(i.TMR0_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[15]">TMR1_IRQHandler</a> from v85xx_isr.o(i.TMR1_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[16]">TMR2_IRQHandler</a> from v85xx_isr.o(i.TMR2_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[17]">TMR3_IRQHandler</a> from v85xx_isr.o(i.TMR3_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[8]">U32K0_IRQHandler</a> from v85xx_isr.o(i.U32K0_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[9]">U32K1_IRQHandler</a> from v85xx_isr.o(i.U32K1_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[c]">UART0_IRQHandler</a> from v85xx_isr.o(i.UART0_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[d]">UART1_IRQHandler</a> from v85xx_isr.o(i.UART1_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[e]">UART2_IRQHandler</a> from v85xx_isr.o(i.UART2_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[f]">UART3_IRQHandler</a> from v85xx_isr.o(i.UART3_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[10]">UART4_IRQHandler</a> from v85xx_isr.o(i.UART4_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[11]">UART5_IRQHandler</a> from v85xx_isr.o(i.UART5_IRQHandler) referenced from startup_v85xx.o(RESET)
 <LI><a href="#[20]">__CHIP_INIT</a> from startup_v85xx.o(.ARM.__AT_0xC0) referenced from startup_v85xx.o(.ARM.__AT_0xC0)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_v85xx.o(.ARM.__AT_0xC0)
 <LI><a href="#[22]">main</a> from mainproc.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_v85xx.o(.ARM.__AT_0xC0))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(.ARM.__AT_0xC0)
</UL>
<P><STRONG><a name="[1ea]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[24]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[44]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1eb]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1ec]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1ed]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1ee]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1ef]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1f0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLKFreq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVR_GetInfo_LoadRTCData
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateUseDay
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX4_BCD4
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_5msClk_Gen
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeas
</UL>

<P><STRONG><a name="[1f1]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSpecPos
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relaystatus_Check
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cover_Check
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDispItem
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORD_BCD2
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Festival_holiday_Judge
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterParaRead
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerError_Check
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Io_Status
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Ctrl
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BYTE_BCD
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Demand
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_ldivmod</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaMeasure
</UL>

<P><STRONG><a name="[1f2]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxRxFrame
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Select_Tag
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Anticoll
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inter_Authrf08
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uip_Data
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Verify
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Para_Verify
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feik_Num_Verify
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Week_Holiday_Verify
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Money_Para_Verify
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Process
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Freeze_Judge
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonthDaymoney_Process
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hour_Freeze_Dl
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeMonth_Money
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeDay_Money
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pw_Dot
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Dl_Dot
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dayfreeze_Judge
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Read_Reg
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Auth
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiquRecord
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ready_Reportdata
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMaxDemand
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Min_Space
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLcdNo
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dmoney_Record
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Handle_key_sts_code
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramRecord
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTRecord
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLRecord
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBinWithMac
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBinFile
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Usercard_Serial
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_WithMac
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_ToEe_WithMac
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ready_Remainback
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRandom
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Money
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EsamReset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseWithMac
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Esam_Proc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Err_Record
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Mac_Pro
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buy_Record
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authorization
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_In_Out
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC_RactGroup
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Demand
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_01_test
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_updata_APDU_key_var
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_updata_APDU_TOKEN_Record
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Change_Key
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dayfreeze_Judge
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecToHex_20BYTE
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sub_Bcd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
</UL>

<P><STRONG><a name="[1f3]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inter_Authrf08
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Relay_Event
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Proc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramRecord
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buy_Record
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1f5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Otherdata
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commaddr_Verify
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Demand1
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rand_Gene
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Verify
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeMonth_Money
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeMonth_Demand
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeDay_Money
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_RN7302Para_Verify
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Demand
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_set_key_second
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_set_key_frist
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Head
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ready_Reportdata
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMaxDemand
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ready_Remainback
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeBuyTimes
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Money
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_MeterMoney
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Err_Record
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_initialize_APDU_analyze_var
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Change_Key
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailKey
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Process
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecToHex_20BYTE
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dl_Check
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Handle_key_sts_code
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeas
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstantPowerMeas
</UL>

<P><STRONG><a name="[1f7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaMeasure
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcdled_Control
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Relay_Delay
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterParaRead
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_clear_balance
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Min
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Preset_Pro
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeBuyTimes
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Err_Record
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCount
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIMeas
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_BasicPara
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeas
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstantPowerMeas
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_02_set
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_00_purchase
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_set_power_limit
</UL>

<P><STRONG><a name="[1f8]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Otherdata
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rand_Gene
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Relay_Delay
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateUseDay
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Demand
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterParaRead
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_clear_balance
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Min
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_Const_Verify
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminal_Moneyin_Judge
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Commu_Relaydata
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Err_Record
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCount
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIMeas
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeas
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstantPowerMeas
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Demand
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_01_test
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_00_purchase
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_set_power_limit
</UL>

<P><STRONG><a name="[1fa]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Demand
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVR_GetInfo_LoadRTCData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaMeasure
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIMeas
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeas
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Demand
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaMeasure
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateUseDay
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeas
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Demand
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Pav
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterParaRead
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_BasicPara
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_BasicPara
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeas
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVR_GetInfo_LoadRTCData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaMeasure
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateUseDay
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIMeas
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Demand
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Pav
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterParaRead
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_BasicPara
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVR_GetInfo_LoadRTCData
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Demand
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVR_GetInfo_LoadRTCData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaMeasure
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateUseDay
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIMeas
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeas
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Pav
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterParaRead
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_BasicPara
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_BasicPara
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateUseDay
</UL>

<P><STRONG><a name="[1fc]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1fd]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1fe]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ff]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2e]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[37]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[36]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[25]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[201]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>ANA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.ANA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>ATT7051SPIOp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uenergy-rn.o(i.ATT7051SPIOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ATT7051SPIOp &rArr; ATT7051SPIOp_rel &rArr; EmuRegOp &rArr; SPIWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp_rel
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Read_Reg
</UL>

<P><STRONG><a name="[46]"></a>ATT7051SPIOp_rel</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, uenergy-rn.o(i.ATT7051SPIOp_rel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ATT7051SPIOp_rel &rArr; EmuRegOp &rArr; SPIWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Head
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmuRegOp
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
</UL>

<P><STRONG><a name="[4a]"></a>Adc_Proc</STRONG> (Thumb, 584 bytes, Stack size 112 bytes, init.o(i.Adc_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = Adc_Proc &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVR_GetInfo_LoadRTCData
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reportdata
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>Add_Bcd</STRONG> (Thumb, 96 bytes, Stack size 36 bytes, rtc.o(i.Add_Bcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Add_Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Add1_Direct
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sub_Bcd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Process
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonthDaymoney_Process
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateUseDay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dl_Check
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeBuyTimes
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buy_Record
</UL>

<P><STRONG><a name="[54]"></a>Add_Min_Clock</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, uartx.o(i.Add_Min_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Add_Min_Clock &rArr; ClockAddOne &rArr; Hex_To_Bcd &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockAddOne
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Min_Space
</UL>

<P><STRONG><a name="[57]"></a>Alarmstatus_Judge</STRONG> (Thumb, 422 bytes, Stack size 8 bytes, money.o(i.Alarmstatus_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Alarmstatus_Judge &rArr; Remainmoney_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reportdata
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Verify
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Money_Para_Verify
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_DataLH
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Proc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Preset_Pro
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Money_In
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
</UL>

<P><STRONG><a name="[5d]"></a>Auth_In_Out</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, u7816.o(i.Auth_In_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Auth_In_Out &rArr; CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authorization
</UL>

<P><STRONG><a name="[61]"></a>Authorization</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, u7816.o(i.Authorization))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Authorization &rArr; Auth_In_Out &rArr; CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Kx
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRandom
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_In_Out
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Auth
</UL>

<P><STRONG><a name="[65]"></a>BCD4_HEX4</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, adrn7302.o(i.BCD4_HEX4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BCD4_HEX4
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD_BYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC_RactGroup
</UL>

<P><STRONG><a name="[66]"></a>BCD_BYTE</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adrn7302.o(i.BCD_BYTE))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD4_HEX4
</UL>

<P><STRONG><a name="[67]"></a>BYTE_BCD</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, adrn7302.o(i.BYTE_BCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BYTE_BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORD_BCD2
</UL>

<P><STRONG><a name="[68]"></a>Backup_Para_7051</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uenergy-rn.o(i.Backup_Para_7051))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Backup_Para_7051 &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
</UL>

<P><STRONG><a name="[6a]"></a>Bcd2Hex</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, rtc.o(i.Bcd2Hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Bcd2Hex &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Timer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateUseDay
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalZhuhe
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
</UL>

<P><STRONG><a name="[50]"></a>Bcd_To_Hex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtc.o(i.Bcd_To_Hex))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Min_Clock
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAbsMin
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAbsDay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cover_Check
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Shiduan_Process
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dayfreeze_Judge
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Festival_holiday_Judge
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockAddOne
</UL>

<P><STRONG><a name="[6c]"></a>Beep_Ctrl</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, v85xx_isr.o(i.Beep_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Beep_Ctrl &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>BitValue</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, uartx.o(i.BitValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
</UL>

<P><STRONG><a name="[6d]"></a>Bkdl_Verify</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, verify.o(i.Bkdl_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Bkdl_Verify &rArr; Verify_Dl &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Dl
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_Const_Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
</UL>

<P><STRONG><a name="[70]"></a>Buy_Record</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, u7816.o(i.Buy_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Buy_Record &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Bcd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuyTimes2Byte
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dmoney_Record
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoneyIn
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[77]"></a>CLK_ClockConfig</STRONG> (Thumb, 954 bytes, Stack size 16 bytes, v85xx_clk.o(i.CLK_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_ClockConfig &rArr; RTC_PrescalerConfig &rArr; RTC_WriteProtection
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_PrescalerConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_errhandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[7a]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 478 bytes, Stack size 32 bytes, v85xx_clk.o(i.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLKFreq
</UL>

<P><STRONG><a name="[7c]"></a>CLK_GetPCLKFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, v85xx_clk.o(i.CLK_GetPCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CLK_GetPCLKFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVR_GetInfo_LoadRTCData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_5msClk_Gen
</UL>

<P><STRONG><a name="[b5]"></a>CalRecTimes</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, event.o(i.CalRecTimes))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSpecPos
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
</UL>

<P><STRONG><a name="[b3]"></a>CalStAddr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, event.o(i.CalStAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSpecPos
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
</UL>

<P><STRONG><a name="[7d]"></a>CalZhuhe</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, uartx.o(i.CalZhuhe))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CalZhuhe &rArr; Bcd2Hex &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
</UL>

<P><STRONG><a name="[17b]"></a>Cal_ChkSum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uartx.o(i.Cal_ChkSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cal_ChkSum
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
</UL>

<P><STRONG><a name="[7e]"></a>Cal_Comb</STRONG> (Thumb, 436 bytes, Stack size 128 bytes, uartx.o(i.Cal_Comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalZhuhe
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
</UL>

<P><STRONG><a name="[80]"></a>Cal_Comb_Usedl</STRONG> (Thumb, 202 bytes, Stack size 88 bytes, uartx.o(i.Cal_Comb_Usedl))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Cal_Comb_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalZhuhe
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[82]"></a>Cal_Mac_Pro</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, u7816.o(i.Cal_Mac_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Cal_Mac_Pro &rArr; Read_Kx &rArr; CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Kx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[83]"></a>Cal_Pav</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, demand.o(i.Cal_Pav))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Cal_Pav &rArr; Hex2Bcd &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demand_Process
</UL>

<P><STRONG><a name="[84]"></a>CalcAbsDay</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, event.o(i.CalcAbsDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CalcAbsDay
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTime
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
</UL>

<P><STRONG><a name="[85]"></a>CalcAbsMin</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, event.o(i.CalcAbsMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalcAbsMin
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTime
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[86]"></a>CalcTime</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, event.o(i.CalcTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CalcTime &rArr; CalcAbsDay
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAbsMin
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAbsDay
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
</UL>

<P><STRONG><a name="[1db]"></a>CalcTransferAmt</STRONG> (Thumb, 96 bytes, Stack size 28 bytes, sts.o(i.CalcTransferAmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CalcTransferAmt
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_set_power_limit
</UL>

<P><STRONG><a name="[87]"></a>Calc_Pwr_Proc</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, money.o(i.Calc_Pwr_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Calc_Pwr_Proc &rArr; Price_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Bcd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fwdl_Verify
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bkdl_Verify
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Process
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonthDaymoney_Process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECMeasure
</UL>

<P><STRONG><a name="[8d]"></a>CalculateUseDay</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, lcd.o(i.CalculateUseDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CalculateUseDay &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Bcd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[90]"></a>Calculate_Demand</STRONG> (Thumb, 274 bytes, Stack size 88 bytes, demand.o(i.Calculate_Demand))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Calculate_Demand &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demand_Process
</UL>

<P><STRONG><a name="[93]"></a>Calculate_Min</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, v85xx_isr.o(i.Calculate_Min))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Calculate_Min
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Hourwakeup
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
</UL>

<P><STRONG><a name="[95]"></a>Calculate_Program_Cs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uartx.o(i.Calculate_Program_Cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Calculate_Program_Cs &rArr; Hex2Bcd &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[96]"></a>Calculate_Timer</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uartx.o(i.Calculate_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Calculate_Timer &rArr; Bcd2Hex &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Relay_Delay
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ready_Reportdata
</UL>

<P><STRONG><a name="[60]"></a>CardTxRxFrame</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, u7816.o(i.CardTxRxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxRxFrame
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snd_7816_Byte
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_7816_Char
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Err_Report
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Netu
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBinWithMac
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBinFile
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectFile
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Kx
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecFile
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRandom
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseWithMac
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Mac_Pro
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_In_Out
</UL>

<P><STRONG><a name="[9c]"></a>Card_Err_Record</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, u7816.o(i.Card_Err_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Card_Err_Record &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuyTimes2Byte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Proc
</UL>

<P><STRONG><a name="[9e]"></a>Card_Esam_Proc</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, u7816.o(i.Card_Esam_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Card_Esam_Proc &rArr; OpenAddMoney &rArr; UpdataRefer_ToEe_WithMac &rArr; Price_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inter_Authrf08
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_WithMac
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadM1File
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Proc
</UL>

<P><STRONG><a name="[a3]"></a>Card_Proc</STRONG> (Thumb, 830 bytes, Stack size 8 bytes, u7816.o(i.Card_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = Card_Proc &rArr; Lcd_Display &rArr; Cal_Comb_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Release_Rf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarmstatus_Judge
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Closerelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_MeterMoney
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Card
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Esam_Proc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Err_Record
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>Changecontrol_Process</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, tariff.o(i.Changecontrol_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithJieti
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPrice
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithJieti
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
</UL>

<P><STRONG><a name="[108]"></a>CheckNum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, measure.o(i.CheckNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckNum
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC_RactGroup
</UL>

<P><STRONG><a name="[1ce]"></a>CheckSysReg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, verify.o(i.CheckSysReg))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Pad
</UL>

<P><STRONG><a name="[a4]"></a>Check_Card</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, u7816.o(i.Check_Card))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Proc
</UL>

<P><STRONG><a name="[5a]"></a>ChkBufZero</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtc.o(i.ChkBufZero))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSQ
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarmstatus_Judge
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateUseDay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_ToEe_WithMac
</UL>

<P><STRONG><a name="[1de]"></a>Class_get</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, sts.o(i.Class_get))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Handle_key_sts_code
</UL>

<P><STRONG><a name="[b1]"></a>ClearPloadRec</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, event.o(i.ClearPloadRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ClearPloadRec &rArr; FindSpecPos &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Load_Point
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSpecPos
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalStAddr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalRecTimes
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[b6]"></a>Clear_Meter</STRONG> (Thumb, 412 bytes, Stack size 88 bytes, u7816.o(i.Clear_Meter))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Clear_Meter &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Zero_Data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Dayfreeze
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Etmr1_Pcount
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Commu_Relaydata
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSelfClose
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buy_Record
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[a8]"></a>Clear_MeterMoney</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, u7816.o(i.Clear_MeterMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Clear_MeterMoney &rArr; Store_Remainmoney &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Remainmoney
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Proc
</UL>

<P><STRONG><a name="[182]"></a>Clear_Nv_Ram</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.Clear_Nv_Ram))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvram_Judge
</UL>

<P><STRONG><a name="[c1]"></a>Clear_Rand_Gene</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, u7816.o(i.Clear_Rand_Gene))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clear_Rand_Gene
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Auth
</UL>

<P><STRONG><a name="[47]"></a>Clear_Wdt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, init.o(i.Clear_Wdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clear_Wdt
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Reg_RW
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Proc
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Event_Proc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Program_Cs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerError_Check
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp_rel
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Handle_key_sts_code
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Ladder_Page
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Feilv_Page
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_WithMac
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snd_7816_Byte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_7816_Char
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Esam_Proc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Reset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_SendByte
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_ReceiveByte
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Change_Key
</UL>

<P><STRONG><a name="[1ae]"></a>Clk_Adj_Proc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.Clk_Adj_Proc))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
</UL>

<P><STRONG><a name="[56]"></a>ClockAddOne</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, uartx.o(i.ClockAddOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ClockAddOne &rArr; Hex_To_Bcd &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Min_Clock
</UL>

<P><STRONG><a name="[c3]"></a>Clock_Init</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, init.o(i.Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Clock_Init &rArr; CLK_ClockConfig &rArr; RTC_PrescalerConfig &rArr; RTC_WriteProtection
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[c4]"></a>Closerelay</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, money.o(i.Closerelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Closerelay &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Metererrstatus
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Relay_Event
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Closerelay1
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
</UL>

<P><STRONG><a name="[c5]"></a>Closerelay1</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, money.o(i.Closerelay1))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Closerelay
</UL>

<P><STRONG><a name="[b7]"></a>ClrRecTimes</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, event.o(i.ClrRecTimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ClrRecTimes &rArr; Init_Metererrstatus &rArr; Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Metererrstatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Reportnum
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Reportdata
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Otherdata
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[ba]"></a>ClrSelfClose</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uartx.o(i.ClrSelfClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ClrSelfClose &rArr; Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[b9]"></a>Clr_Commu_Relaydata</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uartx.o(i.Clr_Commu_Relaydata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clr_Commu_Relaydata
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[cb]"></a>Clr_Otherdata</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uartx.o(i.Clr_Otherdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Clr_Otherdata &rArr; Save_Keep_Timer &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[c9]"></a>Clr_Reportdata</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uartx.o(i.Clr_Reportdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clr_Reportdata
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
</UL>

<P><STRONG><a name="[ca]"></a>Clr_Reportnum</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uartx.o(i.Clr_Reportnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clr_Reportnum
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
</UL>

<P><STRONG><a name="[b8]"></a>Clr_Zero_Data</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uartx.o(i.Clr_Zero_Data))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Hourwakeup
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[d9]"></a>Cmp_Bcd_Inv</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, rtc.o(i.Cmp_Bcd_Inv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cmp_Bcd_Inv
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSpecPos
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSQ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Process
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dayfreeze_Judge
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Psw
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Min_Space
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeEndClock
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeBuyTimes
</UL>

<P><STRONG><a name="[12a]"></a>Cmp_Clock</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rtc.o(i.Cmp_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cmp_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Freeze_Judge
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_ToEe_WithMac
</UL>

<P><STRONG><a name="[63]"></a>Cmp_Data</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, rtc.o(i.Cmp_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cmp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Festival_holiday_Judge
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dl_Check
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Closerelay_Money
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usercard_Serial
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Meter_Id
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authorization
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Demand
</UL>

<P><STRONG><a name="[5b]"></a>Cmp_DataLH</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rtc.o(i.Cmp_DataLH))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cmp_DataLH
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarmstatus_Judge
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeBuyTimes
</UL>

<P><STRONG><a name="[ce]"></a>Cmp_Meter_Id</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, u7816.o(i.Cmp_Meter_Id))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Cmp_Meter_Id &rArr; Cmp_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Auth
</UL>

<P><STRONG><a name="[cf]"></a>ColdReset</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, u7816.o(i.ColdReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ColdReset &rArr; Delay_Initial &rArr; Clear_Wdt
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Wait_5ms
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Edge
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_7816_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EsamReset
</UL>

<P><STRONG><a name="[d3]"></a>CommSetRtc</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, uartx.o(i.CommSetRtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = CommSetRtc &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAbsDay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Zero_Data
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Clock
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rtc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[d7]"></a>CommSetRtc_Adj</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, uartx.o(i.CommSetRtc_Adj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CommSetRtc_Adj &rArr; Wr_Powerdown_Data &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPrice
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Dayfreeze
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syn_Clock
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
</UL>

<P><STRONG><a name="[1a8]"></a>Comm_Auth_Judge</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uartx.o(i.Comm_Auth_Judge))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
</UL>

<P><STRONG><a name="[da]"></a>Comm_Event_Proc</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mainproc.o(i.Comm_Event_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = Comm_Event_Proc &rArr; Uart_Proc &rArr; Yc_Money_In &rArr; OpenAddMoney &rArr; UpdataRefer_ToEe_WithMac &rArr; Price_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeasure
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>Comm_Read_Reg</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, uenergy-rn.o(i.Comm_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Comm_Read_Reg &rArr; ATT7051SPIOp &rArr; ATT7051SPIOp_rel &rArr; EmuRegOp &rArr; SPIWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[df]"></a>Comm_Write_Reg</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, uenergy-rn.o(i.Comm_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Comm_Write_Reg &rArr; Backup_Para_7051 &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backup_Para_7051
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[e0]"></a>Commaddr_Verify</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, verify.o(i.Commaddr_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Commaddr_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
</UL>

<P><STRONG><a name="[e2]"></a>Config_ShiQuLad_Proc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tariff.o(i.Config_ShiQuLad_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Config_ShiQuLad_Proc &rArr; ReadE2WithJieti &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithJieti
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladderdata_Check
</UL>

<P><STRONG><a name="[e4]"></a>Config_Shiduan_Process</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, tariff.o(i.Config_Shiduan_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Config_Shiduan_Process &rArr; I2C_Read_Eeprom44 &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSQ
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
</UL>

<P><STRONG><a name="[e5]"></a>Configure_Register_Sleep</STRONG> (Thumb, 446 bytes, Stack size 8 bytes, v85xx_isr.o(i.Configure_Register_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Configure_Register_Sleep &rArr; RTC_AutoCalCmd &rArr; RTC_WriteProtection
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtection
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AutoCalCmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_Off
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[ec]"></a>Cover_Check</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, iokey.o(i.Cover_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Cover_Check &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
</UL>

<P><STRONG><a name="[89]"></a>Crc_16Bits</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, verify.o(i.Crc_16Bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Crc_16Bits
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Load_Point
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Verify
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Process
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonthDaymoney_Process
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeMonth_Money
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeDay_Money
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_WithMac
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Esam_Proc
</UL>

<P><STRONG><a name="[ed]"></a>Crc_Check</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, verify.o(i.Crc_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Crc_Check &rArr; Crc_16Bits
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayitem_Verify
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladderdata_Check
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Dl
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
</UL>

<P><STRONG><a name="[1c]"></a>DMA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.DMA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>DecToHex_20BYTE</STRONG> (Thumb, 224 bytes, Stack size 88 bytes, sts.o(i.DecToHex_20BYTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DecToHex_20BYTE &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Handle_key_sts_code
</UL>

<P><STRONG><a name="[ef]"></a>DecreaseWithMac</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, u7816.o(i.DecreaseWithMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DecreaseWithMac &rArr; Update_ESAM_Bin_Mac &rArr; WriteBinWithMac &rArr; CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ESAM_Bin_Mac
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinFile
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[f2]"></a>Decrypt</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, uartx.o(i.Decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Decrypt &rArr; Update_ESAM_Bin_Mac &rArr; WriteBinWithMac &rArr; CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeEndClock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBinWithMac
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ESAM_Bin_Mac
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinFile
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
</UL>

<P><STRONG><a name="[d0]"></a>Delay_Initial</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, init.o(i.Delay_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Delay_Initial &rArr; Clear_Wdt
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Wait_5ms
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EsamReset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdReset
</UL>

<P><STRONG><a name="[97]"></a>Delay_Netu</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, u7816.o(i.Delay_Netu))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snd_7816_Byte
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Edge
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>

<P><STRONG><a name="[f5]"></a>Delay_Xms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adrn7302.o(i.Delay_Xms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_Xms
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Wait_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Reset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI
</UL>

<P><STRONG><a name="[f7]"></a>Demand_Para_Verify</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, verify.o(i.Demand_Para_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Demand_Para_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
</UL>

<P><STRONG><a name="[f8]"></a>Demand_Process</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, demand.o(i.Demand_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Demand_Process &rArr; Calculate_Demand &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Demand
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Pav
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
</UL>

<P><STRONG><a name="[f9]"></a>Disp_Dl_Dot</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lcd.o(i.Disp_Dl_Dot))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Disp_Dl_Dot &rArr; Lcd_Show_N &rArr; LCD_Num_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_N
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[fb]"></a>Disp_Pw_Dot</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcd.o(i.Disp_Pw_Dot))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Disp_Pw_Dot &rArr; Lcd_Show_N &rArr; LCD_Num_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_ZF
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_N
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[16d]"></a>Disp_Time_Dot</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, lcd.o(i.Disp_Time_Dot))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[fd]"></a>Display_Para_Verify</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, verify.o(i.Display_Para_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Display_Para_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdMeterMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
</UL>

<P><STRONG><a name="[ff]"></a>Displayitem_Verify</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, verify.o(i.Displayitem_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Displayitem_Verify &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
</UL>

<P><STRONG><a name="[100]"></a>Displaykey_Check</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, iokey.o(i.Displaykey_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Displaykey_Check &rArr; Enable_Closerelay &rArr; Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Closerelay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaykey_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
</UL>

<P><STRONG><a name="[101]"></a>Displaykey_Process</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, iokey.o(i.Displaykey_Process))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaykey_Check
</UL>

<P><STRONG><a name="[102]"></a>Dl_Check</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, verify.o(i.Dl_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Dl_Check &rArr; Add_Bcd
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMultiBcd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Bcd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Dl
</UL>

<P><STRONG><a name="[52]"></a>DltoEepromBuf</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, event.o(i.DltoEepromBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DltoEepromBuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Relay_Event
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hour_Freeze_Dl
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Err_Record
</UL>

<P><STRONG><a name="[104]"></a>Dmoney_Record</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uartx.o(i.Dmoney_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Dmoney_Record &rArr; Remainmoney_Process &rArr; Moneybag_Process1 &rArr; Moneybag_Process &rArr; Remainmoney_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Process
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buy_Record
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[105]"></a>ECMeasure</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, measure.o(i.ECMeasure))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ECMeasure &rArr; Calc_Pwr_Proc &rArr; Price_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeasure
</UL>

<P><STRONG><a name="[106]"></a>EC_RactGroup</STRONG> (Thumb, 1234 bytes, Stack size 160 bytes, measure.o(i.EC_RactGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = EC_RactGroup &rArr; HEX4_BCD4 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX4_BCD4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNum
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD4_HEX4
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeasure
</UL>

<P><STRONG><a name="[109]"></a>Eepr_AckRd</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, i2c.o(i.Eepr_AckRd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Eepr_AckRd
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Bit
</UL>

<P><STRONG><a name="[10d]"></a>Eepr_AckWr</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, i2c.o(i.Eepr_AckWr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Byte
</UL>

<P><STRONG><a name="[10e]"></a>Eepr_Start</STRONG> (Thumb, 344 bytes, Stack size 8 bytes, i2c.o(i.Eepr_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Eepr_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Bit
</UL>

<P><STRONG><a name="[10f]"></a>Eepr_Stop</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, i2c.o(i.Eepr_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Eepr_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Bit
</UL>

<P><STRONG><a name="[49]"></a>EmuRegOp</STRONG> (Thumb, 136 bytes, Stack size 28 bytes, uenergy-rn.o(i.EmuRegOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EmuRegOp &rArr; SPIWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteByte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp_rel
</UL>

<P><STRONG><a name="[a9]"></a>Enable_Closerelay</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, iokey.o(i.Enable_Closerelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Enable_Closerelay &rArr; Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaykey_Check
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Proc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Preset_Pro
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Money_In
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
</UL>

<P><STRONG><a name="[112]"></a>Enable_SPI</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, adrn7302.o(i.Enable_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Enable_SPI &rArr; Clear_Wdt
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Xms
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302Init
</UL>

<P><STRONG><a name="[113]"></a>Energy_Event_Proc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mainproc.o(i.Energy_Event_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Energy_Event_Proc &rArr; ParaMeasure &rArr; PowerMeas &rArr; WORD_BCD2 &rArr; BYTE_BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaMeasure
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>EsamReset</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, u7816.o(i.EsamReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EsamReset &rArr; ColdReset &rArr; Delay_Initial &rArr; Clear_Wdt
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Err_Report
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdReset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process1
</UL>

<P><STRONG><a name="[9b]"></a>Esam_Err_Report</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, u7816.o(i.Esam_Err_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Esam_Err_Report &rArr; Set_Reportdata
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reportdata
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EsamReset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>

<P><STRONG><a name="[116]"></a>Esam_Para_Verify</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, verify.o(i.Esam_Para_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Esam_Para_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
</UL>

<P><STRONG><a name="[53]"></a>Event_Record</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, event.o(i.Event_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Add1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Relay_Event
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramRecord
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTRecord
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLRecord
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Err_Record
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buy_Record
</UL>

<P><STRONG><a name="[9d]"></a>Exchange</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, event.o(i.Exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Auth
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacExchange
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopExchange
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLcdNo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ESAM_Bin_Mac
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_ToEe_WithMac
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Err_Record
</UL>

<P><STRONG><a name="[1d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>FLRecord</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uartx.o(i.FLRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = FLRecord &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopInverse
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_ToEe_WithMac
</UL>

<P><STRONG><a name="[11b]"></a>Factory_Init</STRONG> (Thumb, 1298 bytes, Stack size 80 bytes, factory.o(i.Factory_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Factory_Init &rArr; ClrRecTimes &rArr; Init_Metererrstatus &rArr; Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdMeterMode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMultiBcd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Otherdata
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[11d]"></a>FailKey</STRONG> (Thumb, 42 bytes, Stack size 72 bytes, u7816.o(i.FailKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = FailKey &rArr; SetKey &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKey
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
</UL>

<P><STRONG><a name="[120]"></a>Festival_holiday_Judge</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tariff.o(i.Festival_holiday_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Festival_holiday_Judge &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[e3]"></a>FindSQ</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tariff.o(i.FindSQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FindSQ &rArr; Sequence &rArr; Cmp_Bcd_Inv
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Shiduan_Process
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ShiQuLad_Proc
</UL>

<P><STRONG><a name="[b4]"></a>FindSpecPos</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, event.o(i.FindSpecPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FindSpecPos &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalStAddr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalRecTimes
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
</UL>

<P><STRONG><a name="[1a5]"></a>Find_EventTable</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, uartx.o(i.Find_EventTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Find_EventTable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
</UL>

<P><STRONG><a name="[122]"></a>FreezeDay_Money</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, money.o(i.FreezeDay_Money))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FreezeDay_Money &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
</UL>

<P><STRONG><a name="[123]"></a>FreezeMonth_Demand</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, money.o(i.FreezeMonth_Demand))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = FreezeMonth_Demand &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Demand
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
</UL>

<P><STRONG><a name="[125]"></a>FreezeMonth_Money</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, money.o(i.FreezeMonth_Money))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FreezeMonth_Money &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
</UL>

<P><STRONG><a name="[126]"></a>Freeze_Change_Judge</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, tariff.o(i.Freeze_Change_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Freeze_Change_Judge &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeYearClock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
</UL>

<P><STRONG><a name="[b0]"></a>Freeze_Dl</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, money.o(i.Freeze_Dl))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Dayfreeze
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Change_Judge
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Freeze_Judge
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dayfreeze_Judge
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch2
</UL>

<P><STRONG><a name="[129]"></a>Freeze_Judge</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, money.o(i.Freeze_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Freeze_Judge &rArr; Histroy_Freeze_Dl &rArr; Year_Ladder_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Clock
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hour_Freeze_Dl
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeDay_Money
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Hourwakeup
</UL>

<P><STRONG><a name="[128]"></a>Freeze_Usedl</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, money.o(i.Freeze_Usedl))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Freeze_Usedl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fwdl_Verify
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bkdl_Verify
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Change_Judge
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
</UL>

<P><STRONG><a name="[88]"></a>Fwdl_Verify</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, verify.o(i.Fwdl_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Fwdl_Verify &rArr; Verify_Dl &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Dl
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_Const_Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
</UL>

<P><STRONG><a name="[73]"></a>GetBuyTimes2Byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, u7816.o(i.GetBuyTimes2Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetBuyTimes2Byte &rArr; Hex2Bcd &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Err_Record
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buy_Record
</UL>

<P><STRONG><a name="[12d]"></a>GetDispItem</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lcd.o(i.GetDispItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetDispItem &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Valid_Num
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Show_Cnt
</UL>

<P><STRONG><a name="[11e]"></a>GetKey</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u7816.o(i.GetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GetKey &rArr; I2C_Read_Eeprom44 &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailKey
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
</UL>

<P><STRONG><a name="[12e]"></a>GetKeyStatus</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, u7816.o(i.GetKeyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GetKeyStatus &rArr; GetKey &rArr; I2C_Read_Eeprom44 &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPswBit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKey
</UL>

<P><STRONG><a name="[130]"></a>GetLcdNo</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, uartx.o(i.GetLcdNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetLcdNo &rArr; Exchange
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[12f]"></a>GetPswBit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, u7816.o(i.GetPswBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetPswBit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
</UL>

<P><STRONG><a name="[1c9]"></a>GetSetBitNum</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, u7816.o(i.GetSetBitNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetSetBitNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
</UL>

<P><STRONG><a name="[9a]"></a>Get_7816_Char</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, u7816.o(i.Get_7816_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_7816_Char &rArr; Clear_Wdt
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdReset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>

<P><STRONG><a name="[131]"></a>Get_Keep_Timer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, v85xx_isr.o(i.Get_Keep_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Get_Keep_Timer &rArr; Save_Keep_Timer &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
</UL>

<P><STRONG><a name="[132]"></a>Get_Money_File</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, uartx.o(i.Get_Money_File))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = Get_Money_File &rArr; Moneybag_Process2 &rArr; Moneybag_Process &rArr; Remainmoney_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopExchange
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecFile
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process2
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[137]"></a>Get_RTCTop_Proc</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, uartx.o(i.Get_RTCTop_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Get_RTCTop_Proc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[138]"></a>Get_Show_Cnt</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lcd.o(i.Get_Show_Cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Get_Show_Cnt &rArr; GetDispItem &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDispItem
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[1d5]"></a>Get_TID</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sts.o(i.Get_TID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_TID
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_clear_balance
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_00_purchase
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_set_power_limit
</UL>

<P><STRONG><a name="[139]"></a>Get_Usercard_Serial</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, u7816.o(i.Get_Usercard_Serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Get_Usercard_Serial &rArr; I2C_Read_Eeprom44 &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
</UL>

<P><STRONG><a name="[13a]"></a>Get_Valid_Num</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lcd.o(i.Get_Valid_Num))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Get_Valid_Num &rArr; GetDispItem &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDispItem
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[107]"></a>HEX4_BCD4</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, adrn7302.o(i.HEX4_BCD4))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HEX4_BCD4 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterParaRead
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC_RactGroup
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIMeas
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeas
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, v85xx_isr.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>Hex2Bcd</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, rtc.o(i.Hex2Bcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Hex2Bcd &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Program_Cs
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateUseDay
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keep_Timer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dmoney_Record
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalZhuhe
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Money
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuyTimes2Byte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Demand
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Pav
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_00_purchase
</UL>

<P><STRONG><a name="[55]"></a>Hex_To_Bcd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtc.o(i.Hex_To_Bcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Hex_To_Bcd &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Min_Clock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dayfreeze_Judge
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockAddOne
</UL>

<P><STRONG><a name="[12c]"></a>Histroy_Freeze_Dl</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, money.o(i.Histroy_Freeze_Dl))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Histroy_Freeze_Dl &rArr; Year_Ladder_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeMonth_Money
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeMonth_Demand
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Hourwakeup
</UL>

<P><STRONG><a name="[12b]"></a>Hour_Freeze_Dl</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, money.o(i.Hour_Freeze_Dl))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Hour_Freeze_Dl &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Freeze_Judge
</UL>

<P><STRONG><a name="[a]"></a>I2C_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.I2C_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>I2C_Read_Bottom</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, i2c.o(i.I2C_Read_Bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendaddr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Bit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Receive_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
</UL>

<P><STRONG><a name="[72]"></a>I2C_Read_Eeprom</STRONG> (Thumb, 156 bytes, Stack size 120 bytes, i2c.o(i.I2C_Read_Eeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Number
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Relay_Event
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSpecPos
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Verify
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayitem_Verify
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithJieti
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Shiduan_Process
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ShiQuLad_Proc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeMonth_Money
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeMonth_Demand
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeDay_Money
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateUseDay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Festival_holiday_Judge
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Dl
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiquRecord
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMaxDemand
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTRecord
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLRecord
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Remainmoney
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Esampara
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buy_Record
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Demand
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_updata_APDU_TOKEN_Record
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_updata_APDU_TID_Record
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_TIDVali_Judge
</UL>

<P><STRONG><a name="[ab]"></a>I2C_Read_Eeprom44</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c.o(i.I2C_Read_Eeprom44))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = I2C_Read_Eeprom44 &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Shiduan_Process
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Freeze_Judge
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dayfreeze_Judge
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch2
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Usercard_Serial
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usercard_Serial
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[140]"></a>I2C_Write_Bottom</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, i2c.o(i.I2C_Write_Bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_end
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendaddr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Byte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
</UL>

<P><STRONG><a name="[76]"></a>I2C_Write_Eeprom</STRONG> (Thumb, 178 bytes, Stack size 200 bytes, i2c.o(i.I2C_Write_Eeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Bottom
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bottom
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Otherdata
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Add1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Relay_Event
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithJieti
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hour_Freeze_Dl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeMonth_Money
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeMonth_Demand
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeDay_Money
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Dl
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiquRecord
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTRecord
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Feilv_Page
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buy_Record
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Demand
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_updata_APDU_TOKEN_Record
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_updata_APDU_TID_Record
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_set_APDU_TID_Record
</UL>

<P><STRONG><a name="[ac]"></a>I2C_Write_Eeprom44</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c.o(i.I2C_Write_Eeprom44))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Dayfreeze
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch2
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Usercard_Serial
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKey
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[13e]"></a>I2c_Receive_Byte</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, i2c.o(i.I2c_Receive_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2c_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bottom
</UL>

<P><STRONG><a name="[13f]"></a>I2c_Send_Bit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, i2c.o(i.I2c_Send_Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2c_Send_Bit &rArr; Eepr_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_Stop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_Start
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_AckRd
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendaddr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Bottom
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bottom
</UL>

<P><STRONG><a name="[141]"></a>I2c_Send_Byte</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, i2c.o(i.I2c_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_AckWr
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendaddr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Bottom
</UL>

<P><STRONG><a name="[f6]"></a>I2c_Wait_1ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c.o(i.I2c_Wait_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Xms
</UL>

<P><STRONG><a name="[d1]"></a>I2c_Wait_5ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c.o(i.I2c_Wait_5ms))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Command_Send
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_end
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdReset
</UL>

<P><STRONG><a name="[143]"></a>INIT_F251WDT</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, init.o(i.INIT_F251WDT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INIT_F251WDT
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[12]"></a>ISO78160_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.ISO78160_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ISO78161_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.ISO78161_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[145]"></a>Init_Dayfreeze_Judge</STRONG> (Thumb, 364 bytes, Stack size 128 bytes, money.o(i.Init_Dayfreeze_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = Init_Dayfreeze_Judge &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeClockNoWeek
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[124]"></a>Init_Demand</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, demand.o(i.Init_Demand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_Demand &rArr; Init_Demand1
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Demand1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeMonth_Demand
</UL>

<P><STRONG><a name="[147]"></a>Init_Demand1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, demand.o(i.Init_Demand1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Demand1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Demand
</UL>

<P><STRONG><a name="[1e5]"></a>Init_Dw80251</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.Init_Dw80251))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e6]"></a>Init_Int</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.Init_Int))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>Init_Metererrstatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, money.o(i.Init_Metererrstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Init_Metererrstatus &rArr; Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Closerelay
</UL>

<P><STRONG><a name="[148]"></a>Init_Money</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, u7816.o(i.Init_Money))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Init_Money &rArr; Store_Remainmoney &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Remainmoney
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Preset_Pro
</UL>

<P><STRONG><a name="[14a]"></a>Init_Pad_Io</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, init.o(i.Init_Pad_Io))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[152]"></a>Init_Relay</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, init.o(i.Init_Relay))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[149]"></a>Init_System</STRONG> (Thumb, 560 bytes, Stack size 8 bytes, init.o(i.Init_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = Init_System &rArr; Init_Dayfreeze_Judge &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Release_Rf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Verify
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fwdl_Verify
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayitem_Verify
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Para_Verify
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demand_Para_Verify
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commaddr_Verify
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bkdl_Verify
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Pad
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Hourwakeup
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_RN7302Para_Verify
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_On
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_Off
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Demand
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dayfreeze_Judge
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Festival_holiday_Judge
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterParaRead
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Relay
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Pad_Io
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_F251WDT
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Initial
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15b]"></a>InstantPowerMeas</STRONG> (Thumb, 696 bytes, Stack size 16 bytes, adrn7302.o(i.InstantPowerMeas))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InstantPowerMeas &rArr; RN8302_Read &rArr; RN8302_SendByte &rArr; Clear_Wdt
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeasure
</UL>

<P><STRONG><a name="[9f]"></a>Inter_Authrf08</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, fm17520.o(i.Inter_Authrf08))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Inter_Authrf08 &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Set_Reg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Command_Send
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_WithMac
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Esam_Proc
</UL>

<P><STRONG><a name="[81]"></a>Inverse</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, event.o(i.Inverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Inverse
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keep_Timer
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Read_Reg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopInverse
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
</UL>

<P><STRONG><a name="[15f]"></a>IsBCD</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uartx.o(i.IsBCD))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMultiBcd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Clock
</UL>

<P><STRONG><a name="[103]"></a>IsMultiBcd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uartx.o(i.IsMultiBcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsMultiBcd
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dl_Check
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
</UL>

<P><STRONG><a name="[160]"></a>JTRecord</STRONG> (Thumb, 86 bytes, Stack size 88 bytes, uartx.o(i.JTRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = JTRecord &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopInverse
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_ToEe_WithMac
</UL>

<P><STRONG><a name="[161]"></a>JudgeBuyTimes</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, u7816.o(i.JudgeBuyTimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = JudgeBuyTimes &rArr; Sub_Bcd &rArr; Add_Bcd
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Bcd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sub_Bcd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_DataLH
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
</UL>

<P><STRONG><a name="[146]"></a>JudgeClockNoWeek</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtc.o(i.JudgeClockNoWeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = JudgeClockNoWeek &rArr; Judge_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeYearClock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dayfreeze_Judge
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeEndClock
</UL>

<P><STRONG><a name="[f4]"></a>JudgeEndClock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uartx.o(i.JudgeEndClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = JudgeEndClock &rArr; JudgeClockNoWeek &rArr; Judge_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeClockNoWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
</UL>

<P><STRONG><a name="[163]"></a>JudgeSwitch</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, uartx.o(i.JudgeSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = JudgeSwitch &rArr; JudgeClockNoWeek &rArr; Judge_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeClockNoWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
</UL>

<P><STRONG><a name="[164]"></a>JudgeSwitch2</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, uartx.o(i.JudgeSwitch2))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = JudgeSwitch2 &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[127]"></a>JudgeYearClock</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tariff.o(i.JudgeYearClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = JudgeYearClock &rArr; JudgeClockNoWeek &rArr; Judge_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeClockNoWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Change_Judge
</UL>

<P><STRONG><a name="[165]"></a>Judge_645_Frame</STRONG> (Thumb, 992 bytes, Stack size 24 bytes, v85xx_isr.o(i.Judge_645_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Judge_645_Frame &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>Judge_Clock</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, rtc.o(i.Judge_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Judge_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeClockNoWeek
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rtc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
</UL>

<P><STRONG><a name="[166]"></a>Judge_Closerelay_Money</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, u7816.o(i.Judge_Closerelay_Money))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Judge_Closerelay_Money &rArr; Cmp_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoneyIn
</UL>

<P><STRONG><a name="[d2]"></a>Judge_Edge</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, u7816.o(i.Judge_Edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Judge_Edge
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Netu
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdReset
</UL>

<P><STRONG><a name="[167]"></a>Judge_Io_Status</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, v85xx_isr.o(i.Judge_Io_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Judge_Io_Status &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerError_Check
</UL>

<P><STRONG><a name="[168]"></a>Judge_Min_Space</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, uartx.o(i.Judge_Min_Space))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Judge_Min_Space &rArr; Add_Min_Clock &rArr; ClockAddOne &rArr; Hex_To_Bcd &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Min_Clock
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[169]"></a>Judge_Relay_Delay</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, money.o(i.Judge_Relay_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Judge_Relay_Delay &rArr; Calculate_Timer &rArr; Bcd2Hex &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Timer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
</UL>

<P><STRONG><a name="[16f]"></a>LCDTranslate64</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd.o(i.LCDTranslate64))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[16a]"></a>LCD_Num_Data</STRONG> (Thumb, 822 bytes, Stack size 208 bytes, lcd.o(i.LCD_Num_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LCD_Num_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_N
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_Err
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_Zedl
</UL>

<P><STRONG><a name="[16b]"></a>Ladderdata_Check</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tariff.o(i.Ladderdata_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Ladderdata_Check &rArr; Config_ShiQuLad_Proc &rArr; ReadE2WithJieti &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ShiQuLad_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
</UL>

<P><STRONG><a name="[16e]"></a>Lcd_Disp_Money</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lcd.o(i.Lcd_Disp_Money))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[eb]"></a>Lcd_Disp_Off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, v85xx_isr.o(i.Lcd_Disp_Off))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Hourwakeup
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
</UL>

<P><STRONG><a name="[14e]"></a>Lcd_Disp_On</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, v85xx_isr.o(i.Lcd_Disp_On))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[16c]"></a>Lcd_Disp_Zedl</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, lcd.o(i.Lcd_Disp_Zedl))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Lcd_Disp_Zedl &rArr; LCD_Num_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[a6]"></a>Lcd_Display</STRONG> (Thumb, 6106 bytes, Stack size 128 bytes, lcd.o(i.Lcd_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = Lcd_Display &rArr; Cal_Comb_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Program_Cs
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_N
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_Err
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_Zedl
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_Money
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDTranslate64
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Show_Cnt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Time_Dot
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pw_Dot
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Dl_Dot
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateUseDay
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Proc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
</UL>

<P><STRONG><a name="[170]"></a>Lcd_Show_Err</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lcd.o(i.Lcd_Show_Err))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Lcd_Show_Err &rArr; LCD_Num_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
</UL>

<P><STRONG><a name="[fa]"></a>Lcd_Show_N</STRONG> (Thumb, 484 bytes, Stack size 48 bytes, lcd.o(i.Lcd_Show_N))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Lcd_Show_N &rArr; LCD_Num_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pw_Dot
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Dl_Dot
</UL>

<P><STRONG><a name="[fc]"></a>Lcd_Show_ZF</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd.o(i.Lcd_Show_ZF))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Pw_Dot
</UL>

<P><STRONG><a name="[171]"></a>Lcdled_Control</STRONG> (Thumb, 864 bytes, Stack size 8 bytes, v85xx_isr.o(i.Lcdled_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lcdled_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
</UL>

<P><STRONG><a name="[1ba]"></a>Lib_BcdArray_Inc</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rtc.o(i.Lib_BcdArray_Inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lib_BcdArray_Inc
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sub_Bcd
</UL>

<P><STRONG><a name="[172]"></a>Load_Judge</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, event.o(i.Load_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Load_Judge &rArr; Wr_Powerdown_Data &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Load_Point
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uip_Data
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTime
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
</UL>

<P><STRONG><a name="[136]"></a>LoopExchange</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, uartx.o(i.LoopExchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoopExchange &rArr; Exchange
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Money_File
</UL>

<P><STRONG><a name="[11a]"></a>LoopInverse</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, uartx.o(i.LoopInverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LoopInverse &rArr; Inverse
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Preset_Pro
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Auth
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTRecord
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLRecord
</UL>

<P><STRONG><a name="[175]"></a>MacExchange</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uartx.o(i.MacExchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MacExchange &rArr; Exchange
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminal_Moneyin_Judge
</UL>

<P><STRONG><a name="[1ca]"></a>Mac_Err_Proc</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, u7816.o(i.Mac_Err_Proc))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Preset_Pro
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ESAM_Bin_Mac
</UL>

<P><STRONG><a name="[158]"></a>MeterParaRead</STRONG> (Thumb, 572 bytes, Stack size 24 bytes, init.o(i.MeterParaRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MeterParaRead &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORD_BCD2
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX4_BCD4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[6e]"></a>Meter_Const_Verify</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, verify.o(i.Meter_Const_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Meter_Const_Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fwdl_Verify
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bkdl_Verify
</UL>

<P><STRONG><a name="[159]"></a>Meter_RN7302Para_Verify</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, verify.o(i.Meter_RN7302Para_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Meter_RN7302Para_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
</UL>

<P><STRONG><a name="[177]"></a>ModeChange</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, uartx.o(i.ModeChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ModeChange &rArr; Year_Ladder_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdMeterMode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Reportdata
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPrice
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Usedl
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarmstatus_Judge
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Closerelay
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSelfClose
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[151]"></a>Mode_Verify</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, verify.o(i.Mode_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Mode_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reportdata
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
</UL>

<P><STRONG><a name="[179]"></a>MoneyIn</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, u7816.o(i.MoneyIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MoneyIn &rArr; Buy_Record &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Remainmoney
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Closerelay_Money
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buy_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
</UL>

<P><STRONG><a name="[59]"></a>Money_Para_Verify</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, verify.o(i.Money_Para_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Money_Para_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarmstatus_Judge
</UL>

<P><STRONG><a name="[17a]"></a>Moneybag_Process</STRONG> (Thumb, 340 bytes, Stack size 88 bytes, u7816.o(i.Moneybag_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Moneybag_Process &rArr; Remainmoney_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Verify
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_ChkSum
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Remainmoney
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecFile
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process1
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process2
</UL>

<P><STRONG><a name="[17c]"></a>Moneybag_Process1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, u7816.o(i.Moneybag_Process1))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Moneybag_Process1 &rArr; Moneybag_Process &rArr; Remainmoney_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EsamReset
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Process
</UL>

<P><STRONG><a name="[133]"></a>Moneybag_Process2</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, u7816.o(i.Moneybag_Process2))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Moneybag_Process2 &rArr; Moneybag_Process &rArr; Remainmoney_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Money_File
</UL>

<P><STRONG><a name="[8c]"></a>MonthDaymoney_Process</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, money.o(i.MonthDaymoney_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MonthDaymoney_Process &rArr; Add_Bcd
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Bcd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
</UL>

<P><STRONG><a name="[bd]"></a>Mt_Alarmstatus_Judge</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, money.o(i.Mt_Alarmstatus_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = Mt_Alarmstatus_Judge &rArr; Openrelay &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Closerelay
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarmstatus_Judge
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, v85xx_isr.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>NVR_GetInfo_LoadRTCData</STRONG> (Thumb, 1250 bytes, Stack size 88 bytes, v85xx_loadnvr.o(i.NVR_GetInfo_LoadRTCData))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = NVR_GetInfo_LoadRTCData &rArr; CLK_GetPCLKFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtection
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLKFreq
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
</UL>

<P><STRONG><a name="[c8]"></a>Note_Relay_Event</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, event.o(i.Note_Relay_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Note_Relay_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Closerelay
</UL>

<P><STRONG><a name="[150]"></a>Note_Reset_Number</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, init.o(i.Note_Reset_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Note_Reset_Number &rArr; I2C_Read_Eeprom44 &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Wait_5ms
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvram_Judge
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[c6]"></a>Note_Run_Event</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, event.o(i.Note_Run_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uip_Data
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DltoEepromBuf
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relaystatus_Check
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cover_Check
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Closerelay
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
</UL>

<P><STRONG><a name="[117]"></a>Number_Add1</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, event.o(i.Number_Add1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Number_Add1 &rArr; Read_Event_Number &rArr; RdRecTimes &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reportdata
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Number
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Add1_Direct
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiquRecord
</UL>

<P><STRONG><a name="[181]"></a>Number_Add1_Direct</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, event.o(i.Number_Add1_Direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Number_Add1_Direct &rArr; Add_Bcd
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Add1
</UL>

<P><STRONG><a name="[17f]"></a>Nvram_Judge</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, init.o(i.Nvram_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Nvram_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Nv_Ram
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Reset_Number
</UL>

<P><STRONG><a name="[a2]"></a>OpenAddMoney</STRONG> (Thumb, 494 bytes, Stack size 16 bytes, u7816.o(i.OpenAddMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = OpenAddMoney &rArr; UpdataRefer_ToEe_WithMac &rArr; Price_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMultiBcd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_save_APDU_key_var
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Handle_key_sts_code
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Usercard_Serial
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_ToEe_WithMac
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Esampara
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ready_Remainback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoneyIn
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeBuyTimes
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usercard_Serial
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Money_In
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Esam_Proc
</UL>

<P><STRONG><a name="[17d]"></a>Openrelay</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, money.o(i.Openrelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Openrelay &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Metererrstatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Relay_Event
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay1
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Relay_Delay
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
</UL>

<P><STRONG><a name="[189]"></a>Openrelay1</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, money.o(i.Openrelay1))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openrelay
</UL>

<P><STRONG><a name="[23]"></a>PMU_EnterIdle_FlashDSTB</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, v85xx_coderam.o(i.PMU_EnterIdle_FlashDSTB), UNUSED, KEPT)

<P><STRONG><a name="[6]"></a>PMU_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, v85xx_isr.o(i.PMU_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWM0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.PWM0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PWM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.PWM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PWM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.PWM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PWM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.PWM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>ParaMeasure</STRONG> (Thumb, 1124 bytes, Stack size 64 bytes, adrn7302.o(i.ParaMeasure))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ParaMeasure &rArr; PowerMeas &rArr; WORD_BCD2 &rArr; BYTE_BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORD_BCD2
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIMeas
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeas
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_Event_Proc
</UL>

<P><STRONG><a name="[18d]"></a>Pd_Freeze_Judge</STRONG> (Thumb, 620 bytes, Stack size 24 bytes, money.o(i.Pd_Freeze_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = Pd_Freeze_Judge &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Clock
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hour_Freeze_Dl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Hourwakeup
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
</UL>

<P><STRONG><a name="[18e]"></a>Pd_Histroyfreeze_Judge</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, money.o(i.Pd_Histroyfreeze_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = Pd_Histroyfreeze_Judge &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeMonth_Demand
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[18f]"></a>PowerError_Check</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, v85xx_isr.o(i.PowerError_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PowerError_Check &rArr; Judge_Io_Status &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Io_Status
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[18b]"></a>PowerMeas</STRONG> (Thumb, 2730 bytes, Stack size 112 bytes, adrn7302.o(i.PowerMeas))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = PowerMeas &rArr; WORD_BCD2 &rArr; BYTE_BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORD_BCD2
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX4_BCD4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaMeasure
</UL>

<P><STRONG><a name="[db]"></a>PowerMeasure</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, measure.o(i.PowerMeasure))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = PowerMeasure &rArr; ECMeasure &rArr; Calc_Pwr_Proc &rArr; Price_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCount
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC_RactGroup
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECMeasure
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstantPowerMeas
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Event_Proc
</UL>

<P><STRONG><a name="[155]"></a>Powerd_Data_Process</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, init.o(i.Powerd_Data_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Powerd_Data_Process &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reportdata
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syn_Clock
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rtc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[156]"></a>Powerd_Hourwakeup</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, v85xx_isr.o(i.Powerd_Hourwakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = Powerd_Hourwakeup &rArr; Freeze_Judge &rArr; Histroy_Freeze_Dl &rArr; Year_Ladder_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Zero_Data
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Freeze_Judge
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_Off
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Min
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[8a]"></a>Price_Judge</STRONG> (Thumb, 546 bytes, Stack size 32 bytes, tariff.o(i.Price_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = Price_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Bcd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladderdata_Check
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Clock
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_ToEe_WithMac
</UL>

<P><STRONG><a name="[bb]"></a>Process_Usedl</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, money.o(i.Process_Usedl))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Change_Judge
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[191]"></a>ProgramRecord</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, uartx.o(i.ProgramRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ProgramRecord &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_ToEe_WithMac
</UL>

<P><STRONG><a name="[190]"></a>PulseCount</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, measure.o(i.PulseCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PulseCount
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeasure
</UL>

<P><STRONG><a name="[192]"></a>RF_Anticoll</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fm17520.o(i.RF_Anticoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RF_Anticoll &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Command_Send
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[15e]"></a>RF_Command_Send</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, fm17520.o(i.RF_Command_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Command_Send
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Read_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxRxFrame
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Select_Tag
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Request
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Anticoll
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inter_Authrf08
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadM1File
</UL>

<P><STRONG><a name="[195]"></a>RF_Fm17xx_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fm17520.o(i.RF_Fm17xx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RF_Fm17xx_Init &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Set_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[196]"></a>RF_Get_Reg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fm17520.o(i.RF_Get_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RF_Get_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Reg_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Command_Send
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Read_FIFO
</UL>

<P><STRONG><a name="[a5]"></a>RF_Init</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, fm17520.o(i.RF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RF_Init &rArr; RF_Anticoll &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Set_Reg
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Select_Tag
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Request
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Fm17xx_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Anticoll
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Proc
</UL>

<P><STRONG><a name="[194]"></a>RF_Read_FIFO</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, fm17520.o(i.RF_Read_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RF_Read_FIFO &rArr; RF_Get_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Reg_RW
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Get_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Command_Send
</UL>

<P><STRONG><a name="[197]"></a>RF_Reg_RW</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, fm17520.o(i.RF_Reg_RW))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Spi_Com
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Command_Send
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Set_Reg
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Read_FIFO
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Get_Reg
</UL>

<P><STRONG><a name="[19a]"></a>RF_Request</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fm17520.o(i.RF_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RF_Request &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Command_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[19b]"></a>RF_Select_Tag</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, fm17520.o(i.RF_Select_Tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RF_Select_Tag &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Set_Reg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Command_Send
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[15d]"></a>RF_Set_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fm17520.o(i.RF_Set_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Reg_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Command_Send
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Select_Tag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Fm17xx_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inter_Authrf08
</UL>

<P><STRONG><a name="[19c]"></a>RF_Spi_Com</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, fm17520.o(i.RF_Spi_Com))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RF_Spi_Com
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Reg_RW
</UL>

<P><STRONG><a name="[98]"></a>RF_TxRxFrame</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, fm17520.o(i.RF_TxRxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Command_Send
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>

<P><STRONG><a name="[15a]"></a>RN8302Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, adrn7302.o(i.RN8302Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = RN8302Init &rArr; RN8302_AdjPara &rArr; Meter_RN7302Para_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Reset
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_BasicPara
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[1a0]"></a>RN8302_AdjPara</STRONG> (Thumb, 1298 bytes, Stack size 56 bytes, adrn7302.o(i.RN8302_AdjPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = RN8302_AdjPara &rArr; Meter_RN7302Para_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_RN7302Para_Verify
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302Init
</UL>

<P><STRONG><a name="[19f]"></a>RN8302_BasicPara</STRONG> (Thumb, 810 bytes, Stack size 40 bytes, adrn7302.o(i.RN8302_BasicPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RN8302_BasicPara &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302Init
</UL>

<P><STRONG><a name="[1a1]"></a>RN8302_Delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adrn7302drive.o(i.RN8302_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Write
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_SendByte
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_ReceiveByte
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Read
</UL>

<P><STRONG><a name="[15c]"></a>RN8302_Read</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, adrn7302drive.o(i.RN8302_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RN8302_Read &rArr; RN8302_SendByte &rArr; Clear_Wdt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_SendByte
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_ReceiveByte
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaMeasure
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIMeas
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_BasicPara
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeas
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstantPowerMeas
</UL>

<P><STRONG><a name="[1a3]"></a>RN8302_ReceiveByte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, adrn7302drive.o(i.RN8302_ReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RN8302_ReceiveByte &rArr; Clear_Wdt
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_SPI_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Read
</UL>

<P><STRONG><a name="[19e]"></a>RN8302_Reset</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, adrn7302.o(i.RN8302_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RN8302_Reset &rArr; RN8302_Write &rArr; RN8302_SendByte &rArr; Clear_Wdt
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Write
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Xms
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302Init
</UL>

<P><STRONG><a name="[19d]"></a>RN8302_SPI_Init</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, adrn7302drive.o(i.RN8302_SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_SendByte
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_ReceiveByte
</UL>

<P><STRONG><a name="[1a2]"></a>RN8302_SendByte</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, adrn7302drive.o(i.RN8302_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RN8302_SendByte &rArr; Clear_Wdt
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_SPI_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Read
</UL>

<P><STRONG><a name="[18c]"></a>RN8302_Write</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, adrn7302drive.o(i.RN8302_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RN8302_Write &rArr; RN8302_SendByte &rArr; Clear_Wdt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_SendByte
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_ReceiveByte
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaMeasure
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Reset
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_BasicPara
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
</UL>

<P><STRONG><a name="[e8]"></a>RTC_AutoCalCmd</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, v85xx_rtc.o(i.RTC_AutoCalCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_AutoCalCmd &rArr; RTC_WriteProtection
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtection
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_errhandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
</UL>

<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 390 bytes, Stack size 0 bytes, v85xx_isr.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>RTC_PrescalerConfig</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, v85xx_rtc.o(i.RTC_PrescalerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_PrescalerConfig &rArr; RTC_WriteProtection
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtection
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_errhandler
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_ClockConfig
</UL>

<P><STRONG><a name="[17e]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, v85xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_PrescalerConfig
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVR_GetInfo_LoadRTCData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AutoCalCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rtc
</UL>

<P><STRONG><a name="[e9]"></a>RTC_WriteProtection</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, v85xx_rtc.o(i.RTC_WriteProtection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteProtection
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_errhandler
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_PrescalerConfig
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVR_GetInfo_LoadRTCData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AutoCalCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Rtc
</UL>

<P><STRONG><a name="[1a4]"></a>RdHisEvent</STRONG> (Thumb, 1116 bytes, Stack size 168 bytes, uartx.o(i.RdHisEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = RdHisEvent &rArr; Read_Event_Number &rArr; RdRecTimes &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Number
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_EventTable
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[fe]"></a>RdMeterMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, verify.o(i.RdMeterMode))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Para_Verify
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
</UL>

<P><STRONG><a name="[74]"></a>RdRecTimes</STRONG> (Thumb, 26 bytes, Stack size 48 bytes, event.o(i.RdRecTimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RdRecTimes &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Number
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relaystatus_Check
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMaxDemand
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buy_Record
</UL>

<P><STRONG><a name="[1a6]"></a>Rd_Relay_Buy_Rec</STRONG> (Thumb, 1112 bytes, Stack size 280 bytes, uartx.o(i.Rd_Relay_Buy_Rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = Rd_Relay_Buy_Rec &rArr; Get_Keep_Timer &rArr; Save_Keep_Timer &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Number
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keep_Timer
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_EventTable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitValue
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_ChkSum
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[f1]"></a>ReadBinFile</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, u7816.o(i.ReadBinFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBinFile
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseWithMac
</UL>

<P><STRONG><a name="[135]"></a>ReadBinWithMac</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, u7816.o(i.ReadBinWithMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ReadBinWithMac &rArr; Read_Kx &rArr; CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Auth_Judge
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Kx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminal_Moneyin_Judge
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Money_File
</UL>

<P><STRONG><a name="[cc]"></a>ReadE2WithBackup</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, i2c.o(i.ReadE2WithBackup))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Psw
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_save_APDU_key_var
</UL>

<P><STRONG><a name="[ad]"></a>ReadE2WithJieti</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tariff.o(i.ReadE2WithJieti))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ReadE2WithJieti &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ShiQuLad_Proc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
</UL>

<P><STRONG><a name="[1a9]"></a>ReadFreezedRec</STRONG> (Thumb, 778 bytes, Stack size 136 bytes, uartx.o(i.ReadFreezedRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ReadFreezedRec &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1aa]"></a>ReadLoadRec</STRONG> (Thumb, 1426 bytes, Stack size 104 bytes, event.o(i.ReadLoadRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ReadLoadRec &rArr; FindSpecPos &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Min_Clock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Load_Point
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSpecPos
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTime
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalStAddr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalRecTimes
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[a0]"></a>ReadM1File</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, u7816.o(i.ReadM1File))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ReadM1File &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Command_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_WithMac
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Esam_Proc
</UL>

<P><STRONG><a name="[1ab]"></a>ReadMaxDemand</STRONG> (Thumb, 190 bytes, Stack size 96 bytes, uartx.o(i.ReadMaxDemand))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ReadMaxDemand &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[64]"></a>ReadRandom</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, u7816.o(i.ReadRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ReadRandom &rArr; CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authorization
</UL>

<P><STRONG><a name="[134]"></a>ReadRecFile</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, u7816.o(i.ReadRecFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReadRecFile &rArr; CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Money_File
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
</UL>

<P><STRONG><a name="[180]"></a>Read_Event_Number</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, event.o(i.Read_Event_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Read_Event_Number &rArr; RdRecTimes &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Add1
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
</UL>

<P><STRONG><a name="[71]"></a>Read_Event_Point</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, event.o(i.Read_Event_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiquRecord
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMaxDemand
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buy_Record
</UL>

<P><STRONG><a name="[62]"></a>Read_Kx</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, u7816.o(i.Read_Kx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Read_Kx &rArr; CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Mac_Pro
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authorization
</UL>

<P><STRONG><a name="[b2]"></a>Read_Load_Point</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, event.o(i.Read_Load_Point))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPloadRec
</UL>

<P><STRONG><a name="[d5]"></a>Read_Rtc</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, rtc.o(i.Read_Rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Read_Rtc &rArr; Judge_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Clock
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rtc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
</UL>

<P><STRONG><a name="[154]"></a>Read_Sysclock</STRONG> (Thumb, 1474 bytes, Stack size 24 bytes, rtc.o(i.Read_Sysclock))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Read_Sysclock &rArr; FailKey &rArr; SetKey &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Wait_5ms
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reportdata
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Reportnum
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcdled_Control
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailKey
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Zero_Data
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rand_Gene
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Relay_Delay
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syn_Clock
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rtc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Festival_holiday_Judge
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Adj_Proc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Hourwakeup
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
</UL>

<P><STRONG><a name="[173]"></a>Read_Uip_Data</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, event.o(i.Read_Uip_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read_Uip_Data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
</UL>

<P><STRONG><a name="[184]"></a>Ready_Remainback</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, u7816.o(i.Ready_Remainback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ready_Remainback &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
</UL>

<P><STRONG><a name="[1af]"></a>Ready_Reportdata</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, uartx.o(i.Ready_Reportdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Ready_Reportdata &rArr; Calculate_Timer &rArr; Bcd2Hex &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Timer
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[af]"></a>RefreshPrice</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tariff.o(i.RefreshPrice))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Ladder_Page
</UL>

<P><STRONG><a name="[1b0]"></a>Relay_Ctrl</STRONG> (Thumb, 666 bytes, Stack size 16 bytes, uartx.o(i.Relay_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Relay_Ctrl &rArr; Enable_Closerelay &rArr; Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Timer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Closerelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Commu_Relaydata
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSelfClose
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1b1]"></a>Relaystatus_Check</STRONG> (Thumb, 652 bytes, Stack size 8 bytes, iokey.o(i.Relaystatus_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Relaystatus_Check &rArr; Note_Run_Event &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reportdata
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdRecTimes
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
</UL>

<P><STRONG><a name="[a7]"></a>Release_Rf</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fm17520.o(i.Release_Rf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Release_Rf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Proc
</UL>

<P><STRONG><a name="[8b]"></a>Remainmoney_Process</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, money.o(i.Remainmoney_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Remainmoney_Process &rArr; Moneybag_Process1 &rArr; Moneybag_Process &rArr; Remainmoney_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Bcd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sub_Bcd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Verify
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dmoney_Record
</UL>

<P><STRONG><a name="[58]"></a>Remainmoney_Verify</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, verify.o(i.Remainmoney_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Remainmoney_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Process
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarmstatus_Judge
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
</UL>

<P><STRONG><a name="[1b2]"></a>Reset</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, v85xx_isr.o(i.Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = Reset &rArr; Pd_Histroyfreeze_Judge &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Histroyfreeze_Judge
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Freeze_Judge
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Min
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[5e]"></a>RxTxCommhead</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, u7816.o(i.RxTxCommhead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RxTxCommhead
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBinWithMac
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBinFile
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectFile
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Kx
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecFile
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRandom
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseWithMac
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Mac_Pro
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_In_Out
</UL>

<P><STRONG><a name="[b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>SPIReadByte</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, uenergy-rn.o(i.SPIReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPIReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmuRegOp
</UL>

<P><STRONG><a name="[110]"></a>SPIWriteByte</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, uenergy-rn.o(i.SPIWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPIWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmuRegOp
</UL>

<P><STRONG><a name="[1e7]"></a>STA</STRONG> (Thumb, 712 bytes, Stack size 236 bytes, sts.o(i.STA))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = STA
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_02_set
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_00_purchase
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>Save_Keep_Timer</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, v85xx_isr.o(i.Save_Keep_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Save_Keep_Timer &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Otherdata
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keep_Timer
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
</UL>

<P><STRONG><a name="[1b3]"></a>Sclock_Event_Proc</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, mainproc.o(i.Sclock_Event_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Sclock_Event_Proc &rArr; Mode_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Verify
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fwdl_Verify
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayitem_Verify
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Para_Verify
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demand_Para_Verify
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commaddr_Verify
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bkdl_Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b4]"></a>SelectFile</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, u7816.o(i.SelectFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SelectFile &rArr; CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[13d]"></a>Sendaddr</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, i2c.o(i.Sendaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Byte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Bottom
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bottom
</UL>

<P><STRONG><a name="[121]"></a>Sequence</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tariff.o(i.Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Sequence &rArr; Cmp_Bcd_Inv
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSQ
</UL>

<P><STRONG><a name="[11f]"></a>SetKey</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, u7816.o(i.SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SetKey &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailKey
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
</UL>

<P><STRONG><a name="[1b5]"></a>Set_Comm_Rate</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, uartx.o(i.Set_Comm_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Set_Comm_Rate &rArr; UpdateSysPara &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[51]"></a>Set_Reportdata</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, uartx.o(i.Set_Reportdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Set_Reportdata
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Add1
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relaystatus_Check
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Verify
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarmstatus_Judge
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Err_Report
</UL>

<P><STRONG><a name="[d6]"></a>Set_Rtc</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, rtc.o(i.Set_Rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Set_Rtc &rArr; Read_Rtc &rArr; Judge_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Clock
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
</UL>

<P><STRONG><a name="[1b6]"></a>ShiquRecord</STRONG> (Thumb, 240 bytes, Stack size 104 bytes, uartx.o(i.ShiquRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ShiquRecord &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Event_Point
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Add1
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[dd]"></a>Sleep</STRONG> (Thumb, 578 bytes, Stack size 8 bytes, v85xx_isr.o(i.Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = Sleep &rArr; Lcd_Display &rArr; Cal_Comb_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Disable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cover_Check
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Valid_Num
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaykey_Process
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Hourwakeup
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_On
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_Off
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerError_Check
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Event_Proc
</UL>

<P><STRONG><a name="[99]"></a>Snd_7816_Byte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, u7816.o(i.Snd_7816_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Snd_7816_Byte &rArr; Clear_Wdt
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Netu
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>

<P><STRONG><a name="[1b9]"></a>Starttimer_Verify</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, verify.o(i.Starttimer_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Starttimer_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
</UL>

<P><STRONG><a name="[1b7]"></a>Store_Data</STRONG> (Thumb, 462 bytes, Stack size 8 bytes, v85xx_isr.o(i.Store_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = Store_Data &rArr; Pd_Freeze_Judge &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Powerdown_Data
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pd_Freeze_Judge
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[187]"></a>Store_Esampara</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, u7816.o(i.Store_Esampara))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Store_Esampara &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
</UL>

<P><STRONG><a name="[5c]"></a>Store_Meterstatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iokey.o(i.Store_Meterstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Store_Meterstatus &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Metererrstatus
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Note_Run_Event
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relaystatus_Check
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarmstatus_Judge
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Closerelay
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Money_In
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSelfClose
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoneyIn
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Money
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_MeterMoney
</UL>

<P><STRONG><a name="[c0]"></a>Store_Remainmoney</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, u7816.o(i.Store_Remainmoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Store_Remainmoney &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoneyIn
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Money
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_MeterMoney
</UL>

<P><STRONG><a name="[162]"></a>Sub_Bcd</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, rtc.o(i.Sub_Bcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Sub_Bcd &rArr; Add_Bcd
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Bcd
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lib_BcdArray_Inc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Process
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeBuyTimes
</UL>

<P><STRONG><a name="[d8]"></a>Syn_Clock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtc.o(i.Syn_Clock))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TMR0_IRQHandler</STRONG> (Thumb, 1180 bytes, Stack size 16 bytes, v85xx_isr.o(i.TMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TMR0_IRQHandler &rArr; Beep_Ctrl &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Ctrl
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TMR1_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, v85xx_isr.o(i.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TMR2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.TMR2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TMR3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.TMR3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>Temperpara_Verify</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, verify.o(i.Temperpara_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Temperpara_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
</UL>

<P><STRONG><a name="[1bb]"></a>Terminal_Moneyin_Judge</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, uartx.o(i.Terminal_Moneyin_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = Terminal_Moneyin_Judge &rArr; UpdataRefer_ToEe_WithMac &rArr; Price_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Preset_Pro
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacExchange
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_ToEe_WithMac
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[193]"></a>Test_Command_Send</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, fm17520.o(i.Test_Command_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Wait_5ms
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Set_Reg
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Reg_RW
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Get_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Command_Send
</UL>

<P><STRONG><a name="[157]"></a>Timezone_Judge</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, tariff.o(i.Timezone_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = Timezone_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feik_Num_Verify
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Week_Holiday_Verify
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Starttimer_Verify
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Demand1
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Shiduan_Process
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Clock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
</UL>

<P><STRONG><a name="[1c0]"></a>Tx_645_Frame</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, v85xx_isr.o(i.Tx_645_Frame))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[48]"></a>Tx_Head</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, uenergy-rn.o(i.Tx_Head))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Tx_Head
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT7051SPIOp_rel
</UL>

<P><STRONG><a name="[8]"></a>U32K0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.U32K0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>U32K1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.U32K1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UART0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UART2_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, v85xx_isr.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART2_IRQHandler &rArr; Judge_645_Frame &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_645_Frame
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_645_Frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v85xx_isr.o(i.UART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART4_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, v85xx_isr.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART4_IRQHandler &rArr; Judge_645_Frame &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_645_Frame
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_645_Frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART5_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, v85xx_isr.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART5_IRQHandler &rArr; Judge_645_Frame &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_645_Frame
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_645_Frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(RESET)
</UL>
<P><STRONG><a name="[18a]"></a>UIMeas</STRONG> (Thumb, 606 bytes, Stack size 40 bytes, adrn7302.o(i.UIMeas))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UIMeas &rArr; RN8302_Read &rArr; RN8302_SendByte &rArr; Clear_Wdt
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX4_BCD4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaMeasure
</UL>

<P><STRONG><a name="[dc]"></a>Uart_Proc</STRONG> (Thumb, 33370 bytes, Stack size 456 bytes, uartx.o(i.Uart_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = Uart_Proc &rArr; Yc_Money_In &rArr; OpenAddMoney &rArr; UpdataRefer_ToEe_WithMac &rArr; Price_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMultiBcd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Reportnum
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Otherdata
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_To_Hex
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLoadRec
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Add1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAbsMin
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithJieti
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPrice
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithJieti
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Data
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBCD
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rand_Gene
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Clock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process1
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeClockNoWeek
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Timer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr_Pretime_Dayfreeze
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarmstatus_Judge
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Program_Cs
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb_Usedl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Comb
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Closerelay
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rtc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Demand
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Bcd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Festival_holiday_Judge
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_Write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Keep_Timer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Read_Reg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Preset_Pro
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Money_In
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yc_Auth
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Psw
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminal_Moneyin_Judge
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiquRecord
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Comm_Rate
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Ctrl
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ready_Reportdata
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMaxDemand
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rd_Relay_Buy_Rec
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdHisEvent
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacExchange
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Min_Space
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSwitch2
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeEndClock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTCTop_Proc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Money_File
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLcdNo
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_EventTable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dmoney_Record
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Handle_key_sts_code
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramRecord
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTRecord
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLRecord
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Auth_Judge
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSelfClose
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_ChkSum
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ESAM_Bin_Mac
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectFile
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinWithMac
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usercard_Serial
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseWithMac
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Meter_Id
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Mac_Pro
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authorization
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auth_In_Out
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Event_Proc
</UL>

<P><STRONG><a name="[188]"></a>UpdataRefer_ToEe_WithMac</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, u7816.o(i.UpdataRefer_ToEe_WithMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = UpdataRefer_ToEe_WithMac &rArr; Price_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Clock
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramRecord
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTRecord
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLRecord
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Ladder_Page
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Feilv_Page
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminal_Moneyin_Judge
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
</UL>

<P><STRONG><a name="[a1]"></a>UpdataRefer_WithMac</STRONG> (Thumb, 1078 bytes, Stack size 16 bytes, u7816.o(i.UpdataRefer_WithMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UpdataRefer_WithMac &rArr; Inter_Authrf08 &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inter_Authrf08
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadM1File
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Esam_Proc
</UL>

<P><STRONG><a name="[1bc]"></a>UpdataRunFile</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, u7816.o(i.UpdataRunFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = UpdataRunFile &rArr; Save_Keep_Timer &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Keep_Timer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_ChkSum
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBinFile
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBinFile
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminal_Moneyin_Judge
</UL>

<P><STRONG><a name="[1c6]"></a>Updata_Feilv_Page</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, u7816.o(i.Updata_Feilv_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Updata_Feilv_Page &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_ToEe_WithMac
</UL>

<P><STRONG><a name="[1c7]"></a>Updata_Ladder_Page</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, u7816.o(i.Updata_Ladder_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Updata_Ladder_Page &rArr; WriteE2WithJieti &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithJieti
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPrice
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_ToEe_WithMac
</UL>

<P><STRONG><a name="[186]"></a>Updata_Usercard_Serial</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, u7816.o(i.Updata_Usercard_Serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Updata_Usercard_Serial &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom44
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
</UL>

<P><STRONG><a name="[1c8]"></a>UpdateBinFile</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, u7816.o(i.UpdateBinFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UpdateBinFile &rArr; CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEsamKey
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunFile
</UL>

<P><STRONG><a name="[1c3]"></a>UpdateEepromKey</STRONG> (Thumb, 920 bytes, Stack size 144 bytes, u7816.o(i.UpdateEepromKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = UpdateEepromKey &rArr; SetKey &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverse
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor_Data
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ESAM_Bin_Mac
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKey
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetBitNum
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPswBit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1c5]"></a>UpdateEsamKey</STRONG> (Thumb, 486 bytes, Stack size 80 bytes, u7816.o(i.UpdateEsamKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = UpdateEsamKey &rArr; Event_Record &rArr; Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBinFile
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKey
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPswBit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[178]"></a>UpdateSysPara</STRONG> (Thumb, 276 bytes, Stack size 104 bytes, uartx.o(i.UpdateSysPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = UpdateSysPara &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Comm_Rate
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
</UL>

<P><STRONG><a name="[f0]"></a>Update_ESAM_Bin_Mac</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, u7816.o(i.Update_ESAM_Bin_Mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Update_ESAM_Bin_Mac &rArr; WriteBinWithMac &rArr; CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBinWithMac
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mac_Err_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseWithMac
</UL>

<P><STRONG><a name="[1cb]"></a>Vector_Event_Proc</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, mainproc.o(i.Vector_Event_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = Vector_Event_Proc &rArr; Lcd_Display &rArr; Cal_Comb_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relaystatus_Check
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Price_Judge
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mt_Alarmstatus_Judge
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Judge
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaykey_Check
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demand_Process
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cover_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cc]"></a>Veri_5msClk_Gen</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, verify.o(i.Veri_5msClk_Gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Veri_5msClk_Gen &rArr; CLK_GetPCLKFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLKFreq
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[1d2]"></a>Veri_Ana_Ctrl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, verify.o(i.Veri_Ana_Ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[1d1]"></a>Veri_Clk_Gen</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, verify.o(i.Veri_Clk_Gen))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[1d3]"></a>Veri_Disp</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, verify.o(i.Veri_Disp))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[bc]"></a>Veri_Etmr1_Pcount</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, verify.o(i.Veri_Etmr1_Pcount))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[14b]"></a>Veri_Pad</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, verify.o(i.Veri_Pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Veri_Pad &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSysReg
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[1c4]"></a>Veri_Psw</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, uartx.o(i.Veri_Psw))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Veri_Psw &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Bcd_Inv
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1d0]"></a>Veri_Rtc</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, verify.o(i.Veri_Rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Veri_Rtc &rArr; RTC_WriteProtection
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtection
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
</UL>

<P><STRONG><a name="[14c]"></a>Veri_Sys_Reg</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, verify.o(i.Veri_Sys_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Veri_Sys_Reg &rArr; Veri_Uart_All &rArr; CLK_GetPCLKFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Pad
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Rtc
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Disp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Clk_Gen
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Ana_Ctrl
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_5msClk_Gen
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
</UL>

<P><STRONG><a name="[153]"></a>Veri_Uart_All</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, verify.o(i.Veri_Uart_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Veri_Uart_All &rArr; CLK_GetPCLKFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLKFreq
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Sys_Reg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[6f]"></a>Verify_Dl</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, verify.o(i.Verify_Dl))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Verify_Dl &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dl_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fwdl_Verify
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bkdl_Verify
</UL>

<P><STRONG><a name="[e1]"></a>Verify_para</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, verify.o(i.Verify_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Check
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperpara_Verify
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Verify
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Para_Verify
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demand_Para_Verify
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commaddr_Verify
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feik_Num_Verify
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Week_Holiday_Verify
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Starttimer_Verify
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Verify
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Money_Para_Verify
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esam_Para_Verify
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_RN7302Para_Verify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_updata_APDU_key_var
</UL>

<P><STRONG><a name="[c2]"></a>WDT_Clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, v85xx_wdt.o(i.WDT_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
</UL>

<P><STRONG><a name="[1b8]"></a>WDT_Disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, v85xx_wdt.o(i.WDT_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[144]"></a>WDT_Enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, v85xx_wdt.o(i.WDT_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_F251WDT
</UL>

<P><STRONG><a name="[176]"></a>WORD_BCD2</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, adrn7302.o(i.WORD_BCD2))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WORD_BCD2 &rArr; BYTE_BCD &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BYTE_BCD
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaMeasure
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterParaRead
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMeas
</UL>

<P><STRONG><a name="[142]"></a>Wait_for_end</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, i2c.o(i.Wait_for_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Wait_for_end
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Wait_5ms
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Bottom
</UL>

<P><STRONG><a name="[1bf]"></a>Week_Holiday_Verify</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, verify.o(i.Week_Holiday_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Week_Holiday_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
</UL>

<P><STRONG><a name="[be]"></a>Wr_Powerdown_Data</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, v85xx_isr.o(i.Wr_Powerdown_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Wr_Powerdown_Data &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerd_Data_Process
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[bf]"></a>Wr_Pretime_Dayfreeze</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, money.o(i.Wr_Pretime_Dayfreeze))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Wr_Pretime_Dayfreeze &rArr; I2C_Write_Eeprom44 &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom44
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommSetRtc_Adj
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
</UL>

<P><STRONG><a name="[f3]"></a>WriteBinWithMac</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, u7816.o(i.WriteBinWithMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = WriteBinWithMac &rArr; CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxTxCommhead
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTxRxFrame
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ESAM_Bin_Mac
</UL>

<P><STRONG><a name="[69]"></a>WriteE2WithBackup</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, i2c.o(i.WriteE2WithBackup))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Event_Point
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRecTimes
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Year_Ladder_Judge
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remainmoney_Process
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Usedl
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Pwr_Proc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backup_Para_7051
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Write_Reg
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysPara
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_save_APDU_key_var
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_ToEe_WithMac
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Remainmoney
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Esampara
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moneybag_Process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Meter
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_AdjPara
</UL>

<P><STRONG><a name="[ae]"></a>WriteE2WithJieti</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tariff.o(i.WriteE2WithJieti))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = WriteE2WithJieti &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Ladder_Page
</UL>

<P><STRONG><a name="[118]"></a>Write_Event_Point</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, event.o(i.Write_Event_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Write_Event_Point &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Record
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hour_Freeze_Dl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Dl
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreezeMonth_Demand
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiquRecord
</UL>

<P><STRONG><a name="[174]"></a>Write_Load_Point</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, event.o(i.Write_Load_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Write_Load_Point &rArr; Crc_16Bits
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_16Bits
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Judge
</UL>

<P><STRONG><a name="[1ad]"></a>Xor_Data</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uartx.o(i.Xor_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Xor_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sysclock
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEepromKey
</UL>

<P><STRONG><a name="[1c1]"></a>Yc_Auth</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, uartx.o(i.Yc_Auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Yc_Auth &rArr; Authorization &rArr; Auth_In_Out &rArr; CardTxRxFrame &rArr; RF_TxRxFrame &rArr; RF_Command_Send &rArr; Test_Command_Send &rArr; RF_Set_Reg &rArr; RF_Reg_RW &rArr; RF_Spi_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rand_Gene
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopInverse
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Meter_Id
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authorization
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1c2]"></a>Yc_Money_In</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, uartx.o(i.Yc_Money_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = Yc_Money_In &rArr; OpenAddMoney &rArr; UpdataRefer_ToEe_WithMac &rArr; Price_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Meterstatus
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarmstatus_Judge
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Closerelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[1bd]"></a>Yc_Preset_Pro</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, uartx.o(i.Yc_Preset_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Yc_Preset_Pro &rArr; Alarmstatus_Judge &rArr; Remainmoney_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarmstatus_Judge
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Closerelay
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopInverse
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mac_Err_Proc
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Money
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminal_Moneyin_Judge
</UL>

<P><STRONG><a name="[13b]"></a>Year_Ladder_Judge</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, tariff.o(i.Year_Ladder_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = Year_Ladder_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Data
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkBufZero
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladderdata_Check
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeYearClock
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freeze_Change_Judge
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ShiQuLad_Proc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Changecontrol_Process
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmp_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Histroy_Freeze_Dl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeChange
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRefer_ToEe_WithMac
</UL>

<P><STRONG><a name="[43]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7b]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, v85xx_clk.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Disp_Zedl
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_645_Frame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFreezedRec
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_01_test
</UL>

<P><STRONG><a name="[204]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[205]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[206]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1d4]"></a>api_APDU_clear_balance</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sts.o(i.api_APDU_clear_balance))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = api_APDU_clear_balance &rArr; api_TIDVali_Judge &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TID
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_TIDVali_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_02_set
</UL>

<P><STRONG><a name="[1d7]"></a>api_APDU_set_key_frist</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, sts.o(i.api_APDU_set_key_frist))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = api_APDU_set_key_frist &rArr; api_Change_Key &rArr; api_set_APDU_TID_Record &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Change_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_02_set
</UL>

<P><STRONG><a name="[1d9]"></a>api_APDU_set_key_second</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, sts.o(i.api_APDU_set_key_second))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = api_APDU_set_key_second &rArr; api_Change_Key &rArr; api_set_APDU_TID_Record &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Change_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_02_set
</UL>

<P><STRONG><a name="[1da]"></a>api_APDU_set_power_limit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sts.o(i.api_APDU_set_power_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = api_APDU_set_power_limit &rArr; api_TIDVali_Judge &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TID
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTransferAmt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_TIDVali_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_02_set
</UL>

<P><STRONG><a name="[1d8]"></a>api_Change_Key</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sts.o(i.api_Change_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = api_Change_Key &rArr; api_set_APDU_TID_Record &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_set_APDU_TID_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_set_key_second
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_set_key_frist
</UL>

<P><STRONG><a name="[183]"></a>api_Handle_key_sts_code</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, sts.o(i.api_Handle_key_sts_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = api_Handle_key_sts_code &rArr; sts_process_apdu_02_set &rArr; api_APDU_set_key_second &rArr; api_Change_Key &rArr; api_set_APDU_TID_Record &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecToHex_20BYTE
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Class_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_02_set
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_01_test
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_00_purchase
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_initialize_APDU_analyze_var
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
</UL>

<P><STRONG><a name="[1d6]"></a>api_TIDVali_Judge</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, sts.o(i.api_TIDVali_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = api_TIDVali_Judge &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_clear_balance
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_00_purchase
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_set_power_limit
</UL>

<P><STRONG><a name="[1dd]"></a>api_initialize_APDU_analyze_var</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sts.o(i.api_initialize_APDU_analyze_var))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = api_initialize_APDU_analyze_var
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Handle_key_sts_code
</UL>

<P><STRONG><a name="[185]"></a>api_save_APDU_key_var</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sts.o(i.api_save_APDU_key_var))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = api_save_APDU_key_var &rArr; WriteE2WithBackup &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteE2WithBackup
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadE2WithBackup
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenAddMoney
</UL>

<P><STRONG><a name="[1dc]"></a>api_set_APDU_TID_Record</STRONG> (Thumb, 168 bytes, Stack size 88 bytes, sts.o(i.api_set_APDU_TID_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = api_set_APDU_TID_Record &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Change_Key
</UL>

<P><STRONG><a name="[1e2]"></a>api_updata_APDU_TID_Record</STRONG> (Thumb, 322 bytes, Stack size 96 bytes, sts.o(i.api_updata_APDU_TID_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = api_updata_APDU_TID_Record &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_02_set
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_00_purchase
</UL>

<P><STRONG><a name="[1e3]"></a>api_updata_APDU_TOKEN_Record</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sts.o(i.api_updata_APDU_TOKEN_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = api_updata_APDU_TOKEN_Record &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Eeprom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Eeprom
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_00_purchase
</UL>

<P><STRONG><a name="[1e4]"></a>api_updata_APDU_key_var</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sts.o(i.api_updata_APDU_key_var))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = api_updata_APDU_key_var &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_02_set
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_00_purchase
</UL>

<P><STRONG><a name="[78]"></a>assert_errhandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainproc.o(i.assert_errhandler))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_PrescalerConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_ClockConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtection
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AutoCalCmd
</UL>

<P><STRONG><a name="[1e8]"></a>checkSTS_crc</STRONG> (Thumb, 60 bytes, Stack size 28 bytes, sts.o(i.checkSTS_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = checkSTS_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_02_set
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_01_test
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_00_purchase
</UL>

<P><STRONG><a name="[1be]"></a>feik_Num_Verify</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, verify.o(i.feik_Num_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = feik_Num_Verify &rArr; Verify_para &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_para
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone_Judge
</UL>

<P><STRONG><a name="[1e9]"></a>get_token_test_type</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, sts.o(i.get_token_test_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_token_test_type
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sts_process_apdu_01_test
</UL>

<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, mainproc.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = main &rArr; Comm_Event_Proc &rArr; Uart_Proc &rArr; Yc_Money_In &rArr; OpenAddMoney &rArr; UpdataRefer_ToEe_WithMac &rArr; Price_Judge &rArr; Changecontrol_Process &rArr; Freeze_Dl &rArr; Process_Usedl &rArr; Cal_Comb &rArr; Read_Event_Point &rArr; ReadE2WithBackup &rArr; I2C_Read_Eeprom &rArr; I2C_Read_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Int
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dw80251
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Wdt
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Proc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Proc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Event_Proc
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sclock_Event_Proc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_Event_Proc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Event_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1df]"></a>sts_process_apdu_00_purchase</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, sts.o(i.sts_process_apdu_00_purchase))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = sts_process_apdu_00_purchase &rArr; api_updata_APDU_TID_Record &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STA
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TID
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSTS_crc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_updata_APDU_key_var
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_updata_APDU_TOKEN_Record
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_updata_APDU_TID_Record
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_TIDVali_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Handle_key_sts_code
</UL>

<P><STRONG><a name="[1e0]"></a>sts_process_apdu_01_test</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, sts.o(i.sts_process_apdu_01_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sts_process_apdu_01_test &rArr; checkSTS_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_token_test_type
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSTS_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Handle_key_sts_code
</UL>

<P><STRONG><a name="[1e1]"></a>sts_process_apdu_02_set</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, sts.o(i.sts_process_apdu_02_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = sts_process_apdu_02_set &rArr; api_APDU_set_key_second &rArr; api_Change_Key &rArr; api_set_APDU_TID_Record &rArr; I2C_Write_Eeprom &rArr; I2C_Write_Bottom &rArr; Sendaddr &rArr; I2c_Send_Byte &rArr; Eepr_AckWr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_set_key_second
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_set_key_frist
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_clear_balance
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STA
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSTS_crc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_updata_APDU_key_var
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_updata_APDU_TID_Record
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_APDU_set_power_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_Handle_key_sts_code
</UL>

<P><STRONG><a name="[1ac]"></a>sub_delay</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2c.o(i.sub_delay))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Rtc
</UL>

<P><STRONG><a name="[10a]"></a>us_delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2c.o(i.us_delay))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Byte
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Receive_Byte
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_Stop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_Start
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_AckWr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_AckRd
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[20]"></a>__CHIP_INIT</STRONG> (Thumb, 438 bytes, Stack size 0 bytes, startup_v85xx.o(.ARM.__AT_0xC0))
<BR>[Address Reference Count : 1]<UL><LI> startup_v85xx.o(.ARM.__AT_0xC0)
</UL>
<P><STRONG><a name="[198]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm17520.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Release_Rf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[199]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm17520.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Release_Rf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[10b]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Byte
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Receive_Byte
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_Stop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_Start
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_AckWr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_AckRd
</UL>

<P><STRONG><a name="[10c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Send_Byte
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Receive_Byte
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_Stop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_Start
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_AckWr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eepr_AckRd
</UL>

<P><STRONG><a name="[14d]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, init.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[14f]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, init.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[1cd]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, verify.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Pad
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Rtc
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_5msClk_Gen
</UL>

<P><STRONG><a name="[1cf]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, verify.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Uart_All
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Pad
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Veri_Rtc
</UL>

<P><STRONG><a name="[e7]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, v85xx_isr.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcdled_Control
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
</UL>

<P><STRONG><a name="[e6]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, v85xx_isr.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcdled_Control
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Data
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Register_Sleep
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
